import logging
from typing import Optional
from app.config import get_settings


# TODO: Review this logging config. It was generated by Cursor entirely.
class LoggingConfig:
    _instance: Optional["LoggingConfig"] = None
    _initialized: bool = False

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if not self._initialized:
            self._settings = get_settings()
            self._configure_logging()
            self._initialized = True

    def _configure_logging(self):
        """Configure logging based on settings."""
        log_level = getattr(logging, self._settings.log_level.upper())

        # Configure root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)

        # Configure specific loggers
        loggers = {
            "uvicorn": log_level,
            "app": log_level,
            "fastapi": log_level,
            # Set third-party loggers to higher levels
            "httpx": logging.WARNING,
            "httpcore": logging.WARNING,
            "openai": logging.WARNING,
            "urllib3": logging.WARNING,
            "sqlalchemy": logging.WARNING,
            "llama_index": logging.WARNING,
        }

        for logger_name, level in loggers.items():
            logger = logging.getLogger(logger_name)
            logger.setLevel(level)
            # Prevent propagation to root logger to avoid duplicate logs
            logger.propagate = False

            # Add handler if none exists
            if not logger.handlers:
                handler = logging.StreamHandler()
                formatter = logging.Formatter(
                    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
                )
                handler.setFormatter(formatter)
                logger.addHandler(handler)

    @property
    def logger(self) -> logging.Logger:
        """Get a logger instance with the configured settings."""
        return logging.getLogger("uvicorn")

    def get_logger(self, name: str) -> logging.Logger:
        """Get a logger instance with the given name."""
        return logging.getLogger(name)


def get_logger(name: str = "uvicorn") -> logging.Logger:
    """Get a logger instance with the given name."""
    return LoggingConfig().get_logger(name)
